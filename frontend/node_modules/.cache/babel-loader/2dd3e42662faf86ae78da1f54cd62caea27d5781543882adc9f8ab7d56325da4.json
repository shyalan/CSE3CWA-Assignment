{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './EditContactModal.css';\nimport EditContactModal from './EditContactModal';\nimport { db } from '../api/models/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [editingContact, setEditingContact] = useState(null);\n  const [name, setName] = useState('');\n  useEffect(() => {\n    // Fetch the list of contacts from the backend\n    db.contacts.findAll().then(contacts => {\n      setContacts(contacts);\n    });\n  }, []);\n  const handleCreateContact = () => {\n    // Check if the name is empty\n    if (!name) {\n      alert(\"Please enter a contact name.\");\n      return;\n    }\n\n    // Check if the name already exists in the list of contacts\n    const nameExists = contacts.some(contact => contact.name === name);\n    if (nameExists) {\n      alert(\"Contact with the same name already exists.\");\n      return;\n    }\n\n    // Create a new contact with the contact name that the user entered\n    const contact = {\n      name\n    };\n\n    // Save the new contact to the database\n    db.contacts.create(contact).then(contact => {\n      setContacts([...contacts, contact]);\n      setName(''); // Clear the input field after creating the contact\n    });\n  };\n\n  const handleDeleteContact = contact => {\n    // Delete the contact from the database\n    db.contacts.destroy({\n      where: {\n        id: contact.id\n      }\n    }).then(() => {\n      // Remove the contact from the list of contacts in the state\n      setContacts(contacts.filter(c => c !== contact));\n    });\n  };\n  const handleEditContact = contact => {\n    setEditingContact(contact);\n  };\n  const handleSaveEditedContact = updatedContact => {\n    // Update the contact in the database\n    db.contacts.update(updatedContact, {\n      where: {\n        id: updatedContact.id\n      }\n    }).then(() => {\n      // Update the contact in the list of contacts in the state\n      const updatedContacts = contacts.map(contact => contact === editingContact ? updatedContact : contact);\n      setContacts(updatedContacts);\n      setEditingContact(null); // Close the modal\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contactor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: name,\n        onChange: event => setName(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create\",\n        onClick: handleCreateContact,\n        children: \"Create Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [contact.name, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit\",\n            onClick: () => handleEditContact(contact),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: () => handleDeleteContact(contact),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: contact.phones.map((phone, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [phone.type, \" - \", phone.number]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, contact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), editingContact && /*#__PURE__*/_jsxDEV(EditContactModal, {\n        contact: editingContact,\n        onSave: handleSaveEditedContact,\n        onClose: () => setEditingContact(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LMf6dF2Pze6vGOYXSAG3B5EF9/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","EditContactModal","db","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","editingContact","setEditingContact","name","setName","findAll","then","handleCreateContact","alert","nameExists","some","contact","create","handleDeleteContact","destroy","where","id","filter","c","handleEditContact","handleSaveEditedContact","updatedContact","update","updatedContacts","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","event","target","onClick","phones","phone","index","number","onSave","onClose","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './EditContactModal.css';\nimport EditContactModal from './EditContactModal';\nimport { db } from '../api/models/index';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [editingContact, setEditingContact] = useState(null);\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    // Fetch the list of contacts from the backend\n    db.contacts.findAll().then((contacts) => {\n      setContacts(contacts);\n    });\n  }, []);\n\n  const handleCreateContact = () => {\n    // Check if the name is empty\n    if (!name) {\n      alert(\"Please enter a contact name.\");\n      return;\n    }\n\n    // Check if the name already exists in the list of contacts\n    const nameExists = contacts.some((contact) => contact.name === name);\n\n    if (nameExists) {\n      alert(\"Contact with the same name already exists.\");\n      return;\n    }\n\n    // Create a new contact with the contact name that the user entered\n    const contact = {\n      name,\n    };\n\n    // Save the new contact to the database\n    db.contacts.create(contact).then((contact) => {\n      setContacts([...contacts, contact]);\n      setName(''); // Clear the input field after creating the contact\n    });\n  };\n\n  const handleDeleteContact = (contact) => {\n    // Delete the contact from the database\n    db.contacts.destroy({\n      where: {\n        id: contact.id,\n      },\n    }).then(() => {\n      // Remove the contact from the list of contacts in the state\n      setContacts(contacts.filter((c) => c !== contact));\n    });\n  };\n\n  const handleEditContact = (contact) => {\n    setEditingContact(contact);\n  };\n\n  const handleSaveEditedContact = (updatedContact) => {\n    // Update the contact in the database\n    db.contacts.update(updatedContact, {\n      where: {\n        id: updatedContact.id,\n      },\n    }).then(() => {\n      // Update the contact in the list of contacts in the state\n      const updatedContacts = contacts.map((contact) =>\n        contact === editingContact ? updatedContact : contact\n      );\n      setContacts(updatedContacts);\n      setEditingContact(null); // Close the modal\n    });\n  };\n\n  return (\n    <div>\n      <h1>Contactor</h1>\n      <div className=\"container\">\n        <h2>Contacts</h2>\n        <input type=\"text\" placeholder=\"Enter contact name\" value={name} onChange={(event) => setName(event.target.value)} />\n        <button className=\"create\" onClick={handleCreateContact}>Create Contact</button>\n        <ul>\n          {contacts.map((contact) => (\n            <li key={contact.id}>\n              {contact.name}\n              <button className=\"edit\" onClick={() => handleEditContact(contact)}>Edit</button>\n              <button className=\"delete\" onClick={() => handleDeleteContact(contact)}>Delete</button>\n              <ul>\n                {contact.phones.map((phone, index) => (\n                  <li key={index}>\n                    {phone.type} - {phone.number}\n                  </li>\n                ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n        {editingContact && (\n          <EditContactModal\n            contact={editingContact}\n            onSave={handleSaveEditedContact}\n            onClose={() => setEditingContact(null)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}